name: Accurate macOS Build

on:
  workflow_dispatch:
    inputs:
      element_web_version:
        description: 'Element Web version (e.g., v1.11.104 or develop)'
        required: true
        default: 'develop'
        type: string
      config_dir:
        description: 'Config directory (e.g., element.io/develop)'
        required: true
        default: 'element.io/develop'
        type: string
      sign_app:
        description: 'Sign the macOS app'
        required: false
        default: false
        type: boolean
  push:
    branches: [ main ]

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js (Latest LTS)
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'yarn'
        
    - name: Install dependencies
      run: |
        # Use --ignore-engines to bypass version conflicts
        yarn install --frozen-lockfile --ignore-engines
        
    - name: Verify Node.js and dependencies
      run: |
        echo "Node.js version: $(node --version)"
        echo "Yarn version: $(yarn --version)"
        echo "Expected Node version from package.json:"
        cat package.json | grep -A2 '"engines"' || echo "No engines field found"
        
        # Verify TypeScript installation
        if ! command -v tsc &> /dev/null; then
          echo "Installing TypeScript..."
          yarn add --dev typescript --ignore-engines
        fi
        echo "TypeScript version: $(npx tsc --version)"
        echo "TSX version: $(npx tsx --version)"
        
    - name: Create necessary directories
      run: |
        yarn run mkdirs
        
    - name: Fetch Element Web
      run: |
        yarn run fetch --noverify -d ${{ inputs.config_dir }} ${{ inputs.element_web_version }}
      env:
        ELEMENT_WEB_VERSION: ${{ inputs.element_web_version }}
        
    - name: Build native dependencies
      run: |
        yarn run build:native --ignore-engines
      continue-on-error: true
      
    - name: Build TypeScript
      run: |
        # Use yarn run instead of direct tsc command
        yarn run build:ts
        
    - name: Build resources
      run: |
        yarn run build:res
        
    - name: Create webapp.asar
      run: |
        yarn run asar-webapp
        
    - name: Verify webapp.asar
      run: |
        if [ ! -f webapp.asar ]; then
          echo "webapp.asar not found!"
          exit 1
        fi
        ls -la webapp.asar
        
    - name: Build for macOS (x64 first)
      run: |
        # Try x64 build first as it's more reliable
        yarn run build:64
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: ${{ inputs.sign_app }}
        
    - name: List build outputs
      run: |
        echo "Build completed! Checking outputs:"
        ls -la dist/ || echo "No dist directory"
        find . -name "*.dmg" -o -name "*.zip" -o -name "*.app" | head -20
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: element-desktop-macos-x64
        path: |
          dist/*.dmg
          dist/*.zip
          dist/mac*/
          dist/*mac*
        retention-days: 7
        if-no-files-found: warn
        
    - name: Try Universal build (optional)
      if: success()
      run: |
        echo "Attempting universal build..."
        yarn run build:universal || echo "Universal build failed, but x64 succeeded"
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
      continue-on-error: true
        
    - name: Upload Universal artifacts (if available)
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: element-desktop-macos-universal
        path: |
          dist/*.dmg
          dist/*.zip
          dist/mac*/
        retention-days: 7
        if-no-files-found: ignore

        
    - name: Create build summary
      if: always()
      run: |
        echo "# Element Desktop macOS Build" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Element Web Version**: ${{ inputs.element_web_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Config Directory**: ${{ inputs.config_dir }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Date**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **macOS Version**: $(sw_vers -productVersion)" >> $GITHUB_STEP_SUMMARY
        echo "- **Node.js Version**: $(node --version)" >> $GITHUB_STEP_SUMMARY
        echo "- **Yarn Version**: $(yarn --version)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Build Output Files" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        find dist/ -type f 2>/dev/null | head -10 || echo "No dist files found"
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Download" >> $GITHUB_STEP_SUMMARY
        echo "The macOS installer files are available in the artifacts section above." >> $GITHUB_STEP_SUMMARY
